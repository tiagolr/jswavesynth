desc: JSWavesynth
tags: synth, instrument

slider1:/tilr_JSWavesynth:Sine.wav:Wave
slider2:vol=-12<-90, 0, .01>Volume
slider3:maxpoly=16<0, 32, 1>Polyphony
slider4:uni_voices=1<1, 8, 1>Unison voices
slider5:uni_detune=0.15<0, 1, 0.01>Unison detune
slider6:uni_pan=0<0, 1, 0.01>Unison panning

slider8:osc_att=1<1, 10000, 1:log>Attack
slider9:osc_dec=1<1, 10000, 1:log>Decay
slider10:osc_sus=0<-90, 0, .1:log>Sustain Db
slider11:osc_rel=500<1, 10000, 1:log>Release

import ws.oversample.jsfx-inc
import ws.wavetable.jsfx-inc
import ws.array.jsfx-inc
import ws.adsr.jsfx-inc

@init
lfile = -1;
lmaxpoly = -1;
wavebuf = 100000;
wavechn = 0;
wavelen = 0;
wavesrate = 0;
osc_free = 1;

poly.array_init(0, 128, 4+8); // [0note, 1velocity, 2freq, 3phase, 4..12 phase_unison]
envelope = 2000; // 128 * 7 buffer
remove_ptrs.array_init(5000, 128, 1);
last_phase = 10000; // 9 buffer for copy pasting note osc phases

function db2gain(db) (10^(db / 20););
function note2freq(n) ( 440 * pow(2, (n - 69) / 12); );

function normalize_wave(buf, len) (
  _min = 1;
  _max = -1;
  loop(i = 0; len,
    _min = min(_min, buf[i]);
    _max = max(_max, buf[i]);
    i += 1;
  );
  loop(i = 0; len,
    buf[i] = 2 * ((buf[i] - _min) / (_max - _min)) -1;
    i += 1;
  );
);

function stereo_to_mono_wave(buf, len) (
  i = 0; loop((len / 2) | 0,
    buf[i] = (buf[i*2] + buf[i*2+1]) * 0.5;
    i += 1;
  );
);

function on_file_change () (
  lfile = 0;
  filehandle=file_open(slider1);
  filehandle > 0 ? (
    lfile = slider1;
    file_riff(filehandle, wavechn, wavesrate);
    wavechn ? (
      wavelen = file_avail(filehandle);
      file_mem(filehandle,wavebuf,wavelen);
    );
    file_close(filehandle);
    wavechn == 2 ? (
      stereo_to_mono_wave(wavebuf, wavelen);
      wavelen = (wavelen / 2) | 0;
    );
    normalize_wave(wavebuf, wavelen);
    wave = 1;
    osc.wave_init(wavebuf, wavelen);
    osc.wave_setf(50);
  );
);

@slider

gain = db2gain(vol);
lfile != slider1 ? on_file_change();
lmaxpoly != maxpoly ? (
  lmaxpoly = maxpoly;
  poly.array_clear();
);
detune_amt = uni_detune * 3 / srate; // 3 hz max detune

@block

while (midirecv(offset, msg1, note, vel)) (
  event = msg1 & 0xF0;
  channel = msg1 & 0x0F;

  // Note on
  event == 0x90 && vel ? (

    // remove note if it is already playing
    note_repeat = 0;
    ptr = poly.array_find(note);
    ptr >= 0 ? (
      note_repeat = 1;
      last_phase[0] = ptr[3];
      loop(i = 1; 8,
        last_phase[i] = ptr[3+i];
        i += 1;
      );
      poly.array_remove(ptr);
    );

    // if polyphony is full and not mono remove first element
    poly.size == maxpoly && maxpoly != 0 ? (
      poly.array_remove(poly.array_first());
    );
    
    ptr = poly.array_add();
    ptr[0] = note;
    ptr[1] = vel / 127;
    ptr[2] = note2freq(note) / srate;
    ptr[3] = note_repeat ? last_phase[0] : osc_free ? rand(2) - 1 : 0; // osc start phase
    loop(i = 4; 8,
      ptr[i] = note_repeat ? last_phase[i-3] : osc_free ? rand(2) - 1 : 0; // random unison start phase
      i += 1;
    );
    
    env = envelope + note * 7;
    adsr_seta(osc_att * 0.001, env);
    adsr_setd(osc_dec * 0.001, env);
    adsr_sets(exp(log(10)/20 * osc_sus), env);
    adsr_setr(osc_rel * 0.001, env);
    adsr_a(vel / 128, env);
  );

  // Note off
  event == 0x80 || (event == 0x90 && !vel) ? (
    ptr = poly.array_find(note);
    ptr >= 0 ? adsr_r(envelope + note * 7);
  );

  // All notes off
  event == 0xB0 && note == 123 ? (
    poly.array_clear();
  );

  midisend(offset, msg1, note, vel);
);

@sample

lfile >= 0 ? (
  outl = 0;
  outr = 0;
  odd_voices = uni_voices & 1;
  remove_ptrs.array_clear();
  ptr = maxpoly == 0
    ? poly.array_last() /* mono voicing */
    : poly.array_first();
  while(ptr >= 0) ( // for each note/voice
    env_state = adsr_process(envelope + ptr[0] * 7);
    loop(i = 0; uni_voices | 0, // for each unison voice
      imod2 = i & 1;
      pos = i == 0 && odd_voices ? 0 : imod2 ? -1 : 1; // center, left or right position
      detune = !odd_voices
        ? pos * detune_amt * (i + 1 - imod2) / uni_voices
        : pos * detune_amt * (i + imod2) / uni_voices;
      osc.wave_setdt(ptr[2] + detune);
      osc.wave_sync(ptr[i + 3]);
      wave = osc.wave_spline3();
      pan = !odd_voices
        ? pos * uni_pan * (i + 1 - imod2) / uni_voices
        : pos * uni_pan * (i + imod2) / uni_voices;
      env = (envelope + ptr[0] * 7)[];
      outl += wave * (1 + pan) * env;
      outr += wave * (1 - pan) * env;
      ptr[i + 3] = osc.t; // update osc phase
      i += 1;
    );
    
    // mark note for deletion
    env_state == 0 ? (
      p = remove_ptrs.array_add();
      p[0] = ptr[0];
    );

    ptr = poly.array_next(ptr);
  );
  
  // remove notes that finished adsr
  ptr = remove_ptrs.array_first();
  while(ptr >= 0) (
    p = poly.array_find(ptr[0]);
    p >= 0 ? poly.array_remove(p);
    ptr = remove_ptrs.array_next(ptr);
  );
  
  remove_ptrs.array_clear();
  spl0 += outl * gain;
  spl1 += outr * gain;
);
